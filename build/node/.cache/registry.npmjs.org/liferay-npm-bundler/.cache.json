{"_id":"liferay-npm-bundler","_rev":"47-1e367bba0a53b2179d5804ee366b7342","name":"liferay-npm-bundler","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","dist-tags":{"latest":"2.1.1","canary":"1.7.0-alpha.6d6b0c8b"},"versions":{"0.1.0":{"name":"liferay-npm-bundler","version":"0.1.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^1.0.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.1.0","_shasum":"e5a201e220169d0adfde851921b320805bb4902f","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"e5a201e220169d0adfde851921b320805bb4902f","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.1.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.1.0.tgz_1499156899755_0.10417125001549721"},"directories":{}},"0.2.0":{"name":"liferay-npm-bundler","version":"0.2.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.2.0","_shasum":"72783559f7a0a1485353af40cda39cb1db829519","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"72783559f7a0a1485353af40cda39cb1db829519","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.2.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.2.0.tgz_1499157581929_0.825918854214251"},"directories":{}},"0.2.1":{"name":"liferay-npm-bundler","version":"0.2.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.2.1","_shasum":"e11647d98a416cc60d6fc282a4191e7fcd8c5a1d","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"e11647d98a416cc60d6fc282a4191e7fcd8c5a1d","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.2.1.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.2.1.tgz_1499157843743_0.029115418437868357"},"directories":{}},"0.2.2":{"name":"liferay-npm-bundler","version":"0.2.2","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.2.2","_shasum":"fd804647719b7beb4f210c3060b4feb31a77e92c","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"fd804647719b7beb4f210c3060b4feb31a77e92c","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.2.2.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.2.2.tgz_1499157868848_0.8534079045057297"},"directories":{}},"0.2.3":{"name":"liferay-npm-bundler","version":"0.2.3","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.2.3","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.2.3","_shasum":"821b61356de4736dceb87fe0d87838b32e08f779","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"821b61356de4736dceb87fe0d87838b32e08f779","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.2.3.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.2.3.tgz_1499158535461_0.28663979400880635"},"directories":{}},"0.3.0":{"name":"liferay-npm-bundler","version":"0.3.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.3.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.3.0","_shasum":"cc7a2f9d7a5272629f6222920c0e4ed92a91154e","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"cc7a2f9d7a5272629f6222920c0e4ed92a91154e","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.3.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.3.0.tgz_1499158937789_0.1266935165040195"},"directories":{}},"0.4.0":{"name":"liferay-npm-bundler","version":"0.4.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.4.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.4.0","_shasum":"4f5b6feea838cad458a81130649be558a613612c","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"4f5b6feea838cad458a81130649be558a613612c","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.4.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.4.0.tgz_1499166726273_0.6722902748733759"},"directories":{}},"0.4.1":{"name":"liferay-npm-bundler","version":"0.4.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.4.1","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.4.1","_shasum":"c947cfd9c99c319f03bf12e55e6ada9cfade1851","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"c947cfd9c99c319f03bf12e55e6ada9cfade1851","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.4.1.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.4.1.tgz_1499175956286_0.7211391814053059"},"directories":{}},"0.5.0":{"name":"liferay-npm-bundler","version":"0.5.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"babel --source-maps -D -d lib src"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-build-tools-util":"^0.5.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.5.0","_shasum":"cb4f675b219cf50cd88234336946943bd852d86e","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"cb4f675b219cf50cd88234336946943bd852d86e","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.5.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.5.0.tgz_1499329207238_0.6432478369679302"},"directories":{}},"0.6.0":{"name":"liferay-npm-bundler","version":"0.6.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-npm-build-tools-common":"^0.6.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.6.0","_shasum":"7c997ae83c4918da15c6f2f6cd029a533f8ed592","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"7c997ae83c4918da15c6f2f6cd029a533f8ed592","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.6.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.6.0.tgz_1503566707737_0.0587943319696933"},"directories":{}},"0.7.0":{"name":"liferay-npm-bundler","version":"0.7.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-npm-build-tools-common":"^0.7.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@0.7.0","_shasum":"6596d331d3a53d917dd761efa8ca550e5cca11a4","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"6596d331d3a53d917dd761efa8ca550e5cca11a4","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-0.7.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-0.7.0.tgz_1503656302416_0.787137690000236"},"directories":{}},"1.0.0":{"name":"liferay-npm-bundler","version":"1.0.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.0.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.0.0","_shasum":"faa651123662c4552eacb8464c9f9e3207d0d7f8","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"faa651123662c4552eacb8464c9f9e3207d0d7f8","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.0.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.0.0.tgz_1503658451503_0.523017360130325"},"directories":{}},"1.1.0":{"name":"liferay-npm-bundler","version":"1.1.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.1.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.1.0","_shasum":"350238763bb7ad2ce464907ad45a10b5e79181e3","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"350238763bb7ad2ce464907ad45a10b5e79181e3","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.1.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.1.0.tgz_1504167109303_0.6031765181105584"},"directories":{}},"1.2.0":{"name":"liferay-npm-bundler","version":"1.2.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.2.0","_shasum":"cd3d3b95467a7e8e319641b3d92ae0ff6efa0abc","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"shasum":"cd3d3b95467a7e8e319641b3d92ae0ff6efa0abc","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.2.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.2.0.tgz_1505380748600_0.049773419043049216"},"directories":{}},"1.2.1":{"name":"liferay-npm-bundler","version":"1.2.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","cp-file":"^4.2.0","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.2.1","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.2.1","_npmVersion":"5.4.2","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-Uk6D99LLAyZ7X8AWcpooiH0Rg8RK805bD4C9mKQPYhaWqzsCx3CwxE107P4ugTlQ/xmIWTVoq2ABBq7O5AM8iQ==","shasum":"9334584465be09b0c63b86dc53f1ab432e0f45a0","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.2.1.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.2.1.tgz_1505893170774_0.07945616589859128"},"directories":{}},"1.2.2":{"name":"liferay-npm-bundler","version":"1.2.2","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.2.2","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.2.2","_npmVersion":"5.4.2","_nodeVersion":"7.10.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-3x6ONSoIut9LYgsZx+rELexLY4HKbcWgPVfilCmEM/YUtIygJ6S0Rdavyjs4gXdpP+2MD/BZOm+eWsX+2X+5RQ==","shasum":"a5cd630443d15ba90a872f7a106b21725eb93350","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.2.2.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.2.2.tgz_1505992588743_0.5318126871716231"},"directories":{}},"1.2.3":{"name":"liferay-npm-bundler","version":"1.2.3","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.2.3","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.2.3","_npmVersion":"5.5.1","_nodeVersion":"8.9.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-RA0zpConZaZU5CLWj3MslbNvThtIrQxk4dJZsb0jjFj0FPFXCZAt/5YCmhmSeCn97gMhxOxNWuteZr6R7J9+0A==","shasum":"e9229f86573795c85920077fec2a97fba97b6410","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.2.3.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.2.3.tgz_1511432165393_0.3230075722094625"},"directories":{}},"1.3.0":{"name":"liferay-npm-bundler","version":"1.3.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"^1.3.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.3.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-dzhxweuUDtTRrbMx1xsLC31HsTZ6L+dcPrUTp0uIzdXWhO2nJGZDP0D/DaYkiiTZDl6EguOWUmxoxMG8dglyqg==","shasum":"463cfd81df7896139fd1ecd1d226ac7418dc175b","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.3.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.3.0.tgz_1513687443090_0.9164320952259004"},"directories":{}},"1.4.0":{"name":"liferay-npm-bundler","version":"1.4.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"1.4.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.4.0","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-RPB9U6LH1PrqfWjD4tOTSSM1zYQQ/T/9QuqYztGKWuAmnvghP8JT/bqrE33GwHmKQMNZsiwxlbDx+58JotwZPw==","shasum":"d015eb482f47e2ba1837a7801467bdc18123de5e","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.4.0.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.4.0.tgz_1516093634008_0.6309971986338496"},"directories":{}},"1.4.2":{"name":"liferay-npm-bundler","version":"1.4.2","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"1.4.2","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3"},"_id":"liferay-npm-bundler@1.4.2","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-tHuJ2drMN0qO1dJab2MRu0HL5r/sBfDCz4l2200iDOkFwLXSEQeqbJEu9A4YvlvfTgelPtUfytf6we2Qkxhl/g==","shasum":"5b0bc6368618f61bfcf976b4ffe119a2555d597e","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.4.2.tgz"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler-1.4.2.tgz_1517327111609_0.7848154436796904"},"directories":{}},"1.5.0":{"name":"liferay-npm-bundler","version":"1.5.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"1.5.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@1.5.0","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-Q5KqrKSj1IpTiXo+WwE5fyLN0cGEnrCdeUP8yXtxfi4urkaiu1lGQrZylCHB9myoeCl98STi21GxTGzJV43tew==","shasum":"e1be573adc1ef98e9b99780a8f8ee3711e5cbab6","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.5.0.tgz","fileCount":86,"unpackedSize":239383},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.5.0_1521038135392_0.8816787045228534"}},"1.6.0-alpha.fa6ec338":{"name":"liferay-npm-bundler","version":"1.6.0-alpha.fa6ec338","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"1.6.0-alpha.fa6ec338","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file:\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t}\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` file specifies the `.babelrc` file to use\nwhen running Babel through the packages `.js` files. Please keep in mind that,\nin this phase, Babel is used to transform package files (for example to convert\nthem to AMD format if necessary) not to transpile them (though, in theory, you\ncould transpile them too if you wanted by configuring the proper plugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"verbose\": <true|false>\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"verbose\"**: dump detailed information about what the tool is doing.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n\n    package configurations where placed next to the tools options (like `*`,\n\t`output`, `exclude`, and so on). This created the possibility of a collision\n\tand thus, the package configurations were namespaced. However, the tool still\n\tfalls back to the root section (outside `packages`) for packages configuration\n\tto maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.6.0-alpha.fa6ec338","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-KQ8/NQiF3Ge3OKv/oz5yFJWmyTdIc6PtSWEwB4HKRiJYiIwY7EdWaMRbAoHd/aEe69L3PndAm20BZqLTGdYgtQ==","shasum":"7741855d7f930e6f23fb8551d9912c5d52ebba46","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.6.0-alpha.fa6ec338.tgz","fileCount":86,"unpackedSize":240149},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.6.0-alpha.fa6ec338_1521108228980_0.6007381527173086"}},"1.6.0":{"name":"liferay-npm-bundler","version":"1.6.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","liferay-npm-build-tools-common":"1.6.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@1.6.0","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-l022cvQfrsyxv3motx6T16Epvd0QtnCN929j5WEtFTkchVpFSVagJpH4lfNYyEwnLvNtaj+o4eNDz2AaZYPuGA==","shasum":"8bede770a84532773877fd328f8d46c761f38eed","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.6.0.tgz","fileCount":86,"unpackedSize":240119},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.6.0_1521109337398_0.5529801465045616"}},"1.7.0-alpha.b6bde8b0":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.b6bde8b0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.b6bde8b0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file:\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t}\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` file specifies the `.babelrc` file to use\nwhen running Babel through the packages `.js` files. Please keep in mind that,\nin this phase, Babel is used to transform package files (for example to convert\nthem to AMD format if necessary) not to transpile them (though, in theory, you\ncould transpile them too if you wanted by configuring the proper plugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n\n    package configurations where placed next to the tools options (like `*`,\n\t`output`, `exclude`, and so on). This created the possibility of a collision\n\tand thus, the package configurations were namespaced. However, the tool still\n\tfalls back to the root section (outside `packages`) for packages configuration\n\tto maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.b6bde8b0","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-MQ3Mj+qGkGezmBGnrl+yQwp+CkPJYDHBuR0U2+dqYCfFuJELwuMINEAfecaPF4boGMQmulGGXClEEO4WfMiynA==","shasum":"1cd094931f3e4d316e69828c51c143e9f60c4ea3","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.b6bde8b0.tgz","fileCount":98,"unpackedSize":263693},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.b6bde8b0_1521190570326_0.6474497747554764"}},"1.7.0-alpha.1158492a":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.1158492a","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.1158492a","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file:\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t}\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` file specifies the `.babelrc` file to use\nwhen running Babel through the packages `.js` files. Please keep in mind that,\nin this phase, Babel is used to transform package files (for example to convert\nthem to AMD format if necessary) not to transpile them (though, in theory, you\ncould transpile them too if you wanted by configuring the proper plugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n\n    package configurations where placed next to the tools options (like `*`,\n\t`output`, `exclude`, and so on). This created the possibility of a collision\n\tand thus, the package configurations were namespaced. However, the tool still\n\tfalls back to the root section (outside `packages`) for packages configuration\n\tto maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.1158492a","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-Zmvrx0xpYETFtEAyGDBrQN2Q8eVNiHf2ImOZsCIKAPCfVPzC9vPC0g9hS2pt/1EspLkntytyCuqkZLhjqS1dMA==","shasum":"15af4e80f5c006e2d3e2ea6bd40e942a984b8b67","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.1158492a.tgz","fileCount":92,"unpackedSize":255117},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.1158492a_1521192793717_0.9042893983516482"}},"1.6.1":{"name":"liferay-npm-bundler","version":"1.6.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.6.1","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@1.6.1","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-gMrjyaur02a2XH7uKKpFEhv19qTIzzL821nfBaWo0cjH8D4CWBsP204tOPuq5uEO4EoanBxUvytOgRlSgtJ9sw==","shasum":"d0d70b563547f3b36d7d2669fd02534a4a117e8e","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.6.1.tgz","fileCount":92,"unpackedSize":255087},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.6.1_1521199488289_0.8663239401056326"}},"1.7.0-alpha.0e246ccd":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.0e246ccd","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.0e246ccd","liferay-npm-bundler-preset-standard":"1.7.0-alpha.0e246ccd","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.0e246ccd","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-baw3pJ4aCzEtZjZ5MSH2rxfjR6vH40haxz5O9dfxkkdz+3dbaTQm1I1oUmZ9cEDxGxB64YWfRAwJx6T/+kUZJA==","shasum":"6ca0d8dbca1514d5f7d13fcc8dc17baaf05bfbe6","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.0e246ccd.tgz","fileCount":106,"unpackedSize":316438},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.0e246ccd_1523621747523_0.2246782246108494"}},"1.7.0-alpha.43ab330a":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.43ab330a","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.43ab330a","liferay-npm-bundler-preset-standard":"1.7.0-alpha.43ab330a","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.43ab330a","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-YHGvsmCWZ6g5UAAvNwg5kfLheB1yxv0FjhnRBSouu8lllYT56CQTzIG4ThS8ilDodW9B+3sITuLD/AfwDzXzkA==","shasum":"c8661a05ad84610bb1205c030e9a5bfcb19ffb9f","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.43ab330a.tgz","fileCount":106,"unpackedSize":316575,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa1FFfCRA9TVsSAnZWagAAFcEP/joSLpN4GMG+oZ+fg/i9\n75RNxzY2VANeLlQHrQ3XVfknGw0pNYmIB0vVHBgPPWJmJ8LKKocdQREDSL/B\n/ElTQMAMINDi5wVIvX7mXAqu9fCcbcVGQJiYep8tC+41OMXw4AzHrDufqHc3\nNq9tADRygGpeVJlMR5eQZwCzYxk8d2Ht/JHf/mP3fPdHOIE7gH0uVxVOLyr1\nYNk6axwWUaThuj4PmKVdZqkclJ17hKf8u2EYfA2oe16xLOki4XywnRoY+lMl\ni/cD262tKFbDnW7eq9GU4SW/+oxAkvnfHR+RUdurPh5L7KdDUONHP9EBhWsG\nicdAGpL+nnyuEQ1nnfMPTSuV3EkSLApMGvwOwpMAbtclqrfdUAdiWGLNE3I1\nXd3TX06PqQaYMpajp+Y8enEnT309q9adRMrbUvmpBCnLfE7jFYtLdE4yZiJi\nYoJE9rugBaX6kuTrNG29RQwjtEVQeIAFqy8OsKd9V21jdgCcM/xz9zjvEdxY\nmW526qnA0RMy59Fk9mpkZDwW7jU8gcRxtVlgPS5Q8R/qiKOq9OlH7OaniWDk\ndKOfqUK9me9seWjNnE3p+xALnOzKSNdwtoPjAuEPJGQBQVkzmBK+8qOec8cK\nCBckNgLMX5RjfvFyfhwzBKMJwxKJe7YOV0fyNCch+UZ9AG/O7oOb8rO40IMu\n+VL+\r\n=8fdG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.43ab330a_1523863902814_0.32442497323002284"}},"1.7.0-alpha.1b73ffed":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.1b73ffed","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.1b73ffed","liferay-npm-bundler-preset-standard":"1.7.0-alpha.1b73ffed","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.1b73ffed","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-vyDA/DHkjLIV0vbEXLtmGekw1QKXVCnGeCeNxrA1yy3kmNU98VGAVZafw0sjoMyrFnXqhadfohXUlk3fdKRNwA==","shasum":"26770758a6cc9752c82cd1794ca11ef3c97277fa","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.1b73ffed.tgz","fileCount":106,"unpackedSize":318270,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa1I/DCRA9TVsSAnZWagAAR8EQAIlPJxJAEbYMjGU6Lx01\nLX3mPet7FXB/wKaea0PH39XmKnOvK/fgaxFcLSoXRpjovGvUCN9gWgzsuiCk\n8diJPRh13/c7xhB6gdpehualyqSwdKM8GzCDpkHvr+uahLJtcPhy5VSutOFD\nRdboA/jBb9tZ33rYXQoRjTxoL7+kOhGkwdNop/GqvFl7Y1erm9AiuCQMo5EF\ncjkW6OOiyq1RxyWGeUIb+KAt2di21R0K32zCwsCU3xVglyZJ0ia4NlAhzOlq\nV59YqIbwD7GvLkuPkye6ZD+mTTFC0D3HTL/wq9a5MacEFt8+Cxlu0dichZR/\nNIKRQjpW/RQVIA4k0dPUpEKL6IDiv+qEidX+Rb6amqEjh/1DPZBzCQ6Kyn6q\nSsafRwi+vrK9/jfXmuKuZ9gUz4MTQoJIkNTjFu4eDGEhLHqZR1u3TpiZceb+\nlWGCzUqmSjfCLXmtUEiubqch/l7cGXDyV2e/ulFt6en47/ee+q3KCqcDGBeq\nzdGr6C81qRD1kIZJv096miHP2TYou5T/EL7JU5LuKXb900o2Qv7ef4Zrc2QB\ngbS+RA5z9Co+CJFvlcFNWbbCFQNvyj5WqT/FYKOCM7b1+6jkAknUClyPUiO/\ntf2aEq8QDN42b3YkgjfDKvEF8wCdOFcPIPJcHZqm93sJyVQ/zEv3fcVYmpEP\nuQoR\r\n=xpUF\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.1b73ffed_1523879875297_0.03378150170911609"}},"1.7.0-alpha.2956f206":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.2956f206","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.2956f206","liferay-npm-bundler-preset-standard":"1.7.0-alpha.2956f206","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.2956f206","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-pbvUicdnR5YQ/wNTC6KAmbXnGMdHEbDtKJBBGSjYzSZcIhIyirivWXcbHOnhvda5kuKyYGabQWKEYAYQqdFJgg==","shasum":"2aeb89abe88fd3b05aa84f87a229bcabbe1e44d1","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.2956f206.tgz","fileCount":106,"unpackedSize":318270,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa2KibCRA9TVsSAnZWagAAuEsP+wVFwY1VXblqmdk2L7xX\nIA/MnxA2zGNMQoh8KPjfEc12hRtFwx+WKyQ3tibV7sOxjkFjXakcbHZE+Y/q\n/Kzjw6kET6+m+IDins4HOq+WUZ0zatgGLwIi9m2IQLQtyKWcUvpOfy+ejUWZ\niL38NJmEofvtsWOt0Cu66qLcsJ39/9QsQ2JgP7z2K48f2ct69N5Aq5Z7Gh/M\nLfd6RXACu8zkznUnCZnE7pzgTtnQTHDC6AiQNJrIZO5lMwaE3re/AKl06jdr\nrwELv7X1KfM8yzuiIwJ7r0MD4d7EizYX4A2lV/ccE67jifhT4VDdObP3uqAI\nFIsPE+i+slnivQtZRm4x3uRV8RwQfAYxUeZxUjIIpP4y2s3Uqfi1wX/V13zr\nYTA5vfux8p6e2wfidoI9ZZoPOe++7MLSGa4nWJB6c6+PyWA8+HsKWxdyeAKN\n5pJWLBj+N3mNJmDzlFq2BSotshONmpSD4HEpLxW7vKIdA35uWG96+4GtgskA\nrDnYk/eJ5l+Nbsf8vieoLxWrcor/8LNMXws6ISvXXMfX+O0/MVb80CFCDBhp\nwR+PgBdc4u/WzBbiHlAoPsPIDcXvN5pHegxQzkM9KQngqnjMKwxnRHLgmg6T\n2dJKWBe30EdPO+13JW5XVSnLeVyAY37mD3Zx6jB5PMYc4OZ+6+yNAXjnMlkz\noRB9\r\n=Hs4K\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.2956f206_1524148379302_0.25037302860828414"}},"1.7.0-alpha.37376d14":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.37376d14","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.37376d14","liferay-npm-bundler-preset-standard":"1.7.0-alpha.37376d14","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.37376d14","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-+qMEA6Ca0R3yTiM0TGF9N8u9oZdRAfE6XO5jDbe8tZwzciHnwwpiuzMVfihIo9Tzi75qizvIZ2zJX+4dPyZLRA==","shasum":"dc53be1d0709ac02967216d5dea9aeb286300d1a","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.37376d14.tgz","fileCount":106,"unpackedSize":327883,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3bITCRA9TVsSAnZWagAAhaUP/2S57FjKktSrcxVQcTIT\nEwpL/rpAXpAMygJoB6tQUbapTnxZwHTg7MQKPulAVM27G1zR/MJXD3NfViAf\n38XiX4vrdLyOkrUIvE6xHxuEw3kJwvhGvJlJgFPQxjbEG4PLNmRY2lvVGoWP\n3o0zix07jJ3Vdpbb68vXVt4egSkzcsyAdAhaLIedDs62suGFLc/CZ4L4TqV2\nkdfyTtkK9JuXeD+G9ARsgWnThOCk8Gbz8UTYaA5jc+jNOAwoEpEqs4F3ALUm\ngVWebBRRzs2kV57xX+d1BVOlJF5oi2Kbsi6P3selOUOuLIekb8DgMRpCFm38\ny4YEUoMsJsZI8GXqZPmFANtuAQdUbO1L7g3Y3FbVR9by7RVPUiSVLIAHVS7c\nxPOTy9sq9QynZLAtFIuJg1BleIjdvNx89y+amYHV5V6o06LPc1MZTH8tTVCX\nEe3YiIPWqbQiQ26E3xyuSEwekN8YIdMik6HmLiR5G6SAWVkdTRgKmAbtFTSv\nkDltw8HGn0hLkGi7GLGy+HzAU0NpEkuKYDO7vfRIdkWWtZq9Bl/61uwxE05+\nFkLIC8sEKmJXlCByJqJiclBRoPkZeLp0VaZnNWHJIkiu8phMK/nI70K2Mjm+\n+WppmTClEE7vKaA1KgiQ3LM/NZTX8znvHg65RY+58d4iej2rN+6fI8Y6GY2Q\nvYoH\r\n=SEHz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.37376d14_1524478482698_0.8948666722843512"}},"1.7.0-alpha.e4d06b30":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.e4d06b30","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.e4d06b30","liferay-npm-bundler-preset-standard":"1.7.0-alpha.e4d06b30","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.e4d06b30","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-hBXDn7eQmBG3DgRgUfVIe/lpX0oxO7g45nYBdxpVJRFjrCG0411kB/hGTBFsKIz7zhs3Gq5RjgEbWN3zd5mMAg==","shasum":"ae9b7971f6651058ac4933585d04775ba7ee81f4","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.e4d06b30.tgz","fileCount":106,"unpackedSize":329439,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3zY8CRA9TVsSAnZWagAATm8P/iMZqwngiFE/OyHwHJfq\nBucfGf3ywgR6n22gZeAP4o5Co9fxd9egSrUN1XQG1LPhlelTThLtH9ztIF3o\nSKqGhLsjEEe8oJjC7SxtoLPKnbpc45iPkoThkzZIcuOimIWzCT2tBKN9NneY\nopS/DEfPtyCw8j7EVWtAdqJ3s7zXnj5O5INPM+6bTj/4mIJL0p+TO5PTb/x1\njbWl0cFXC8PT8UAshTvI/C+qVNceP3jKqCrTCvSLBSBOr1JTFNOuoBFzK7MU\nxy3yLf3HxGCsqnZvWi8Iti2m5Y4PR5tDwmzh/zWAg94T+SyYRybhQSE6ig09\nUkXXexBNkrNNl21W1QAYwKo3cMFy84YcyDHap/oZ33+b2OoHkYZ3vcZhj1k5\nb+9Osev63EIVa82+WzZ/018F7dB6aslQIPaOreskO6y6eqwJl66Xo5o26Nd8\n++Lz0bq7wbG3pWtXgAQ52XAttLJgyqHmK2pWevFZ3DIDclxdTwsBh4WmYFnU\nXnphvhdwPc6lDrerUzZ1q7bOKArN0ce9X2fQch8AVIaKcIEp9NsTqq7tAwpB\nCEFflIindG0aopcvMX5oRrU7nwoxyNO4Itq9uBujEXG4wAsXtoIhHvw107iB\n/uVR3kNyjt5eMakljzZ0o1QVJMfkNK17GA3GmOR8IJGraV0J2bq7PWMNzS13\n1t8U\r\n=XHlO\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.e4d06b30_1524577852308_0.059156300679521934"}},"1.7.0-alpha.cec3fa45":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.cec3fa45","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.cec3fa45","liferay-npm-bundler-preset-standard":"1.7.0-alpha.cec3fa45","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.cec3fa45","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-474mZ3xE9awkEAM99ox8b5OxW90cL0QO+J2yHTX0KGyHWGBtb18tovIRXAgO82dtuwIDYElL820DtTucNHK+lA==","shasum":"fd261578c4105457e878696bf0d42e30da78f5be","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.cec3fa45.tgz","fileCount":106,"unpackedSize":329495,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4Y5pCRA9TVsSAnZWagAADiwP/2+HYCeGYmYj7gBCLf0d\ng86jJq2FOAznTZ6DW0DXYe/4ixW7iaZnU+Yz06X/bpO1Q0+f6vDGWrmnEnRD\nYkl3dv7GmsNxXUPPa1zOkh1b9v7pV2yHFqjCgYvLLaeGFpvEjsnegxT2JjO+\n3zdxkK4O2EVZbCJVkVPE4ZqGSxFRTGZPozM2bU7pxm5x3eRi88mh5pCUDNr4\nIXfnEEX5q0Ay7URXQ8k5o3CVSRI32Jo1omKZRwfpErKC6o/ZadjpsBQ7OdJP\nm4o1jCLU6wUDLUFJc60igOYyWDMQoi0nfSVMTZ/nupvGXYj2F0r7i2CtC/+t\nVxJ7Piby7Mo6wNW7gD7lItzAEg4O4QbS2BeVNOvnbrvmBRoQDWbUOubR9V/6\nBPCf3YGVR6IK3Xy2KT1YZr5YMKdNb+QgHe/cWjOj/5I4VFy8XtBW8bCZ3wyM\nx4oHg5r+P2kSZnO6VfnHco/SbB7c5xRXeSYbshujibwP2BJwZ310mYmpvMxx\nuNnTDiOgGEhfPS/U6o7YTyh55lzATxJbPpJoq8Z4hUEi3qoMSCjuFiwoTf+b\ngkZvoeHAnkn4hiiOVBDAl7f01wzc39k3ISpXgTD4FHW8BauIPOPulrzcMCDC\nRcWMBS/42hCauy6ytysqIH4FqRn3R4sfS8Kwpcup66FLpI2wiPVaVPzd6I0N\nerXl\r\n=gp17\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.cec3fa45_1524731496850_0.3598214500434771"}},"1.6.2":{"name":"liferay-npm-bundler","version":"1.6.2","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.6.2","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@1.6.2","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-R6IHaSPhKMIjcnviZTpsF2CZUBZ0LzD3XnVBhvoimEKLH1PiAspxJhXMlZefqfPMDDK+zbm6Jd+Un6sCWkmF3w==","shasum":"118839ebb0ecf1a72c5e3c220229bc62b8bf07b1","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.6.2.tgz","fileCount":92,"unpackedSize":255095,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6s/rCRA9TVsSAnZWagAAyLEQAKPIBMWJ8uUma29idslw\nsXik2tqI0XNpUr0k7wlCp86NtIC2MkGITzweMLRRIxFqAdZ2qMpK9pk999PM\nQQY+ga7w/psFvv3B/Mr/XoanvoTQJ/5z+FRA04/h5ZHxmPWfIG21Nxp4H7CJ\nUqUOulvpEwCZgLF9aLkQULzpWEyMpF/bsfurVWcxcgPMOa5DhPOtSHKompgU\nTcD5FbecG0+BfiFH52QjvGQLXLaurIOB78sQIeEAhHvEkfQwCtHMBXNgMmZK\nMZXLxEItDfJy2hDyelNQMcx9/VbF0OBFLHs/om64D1wCE1XnV58qFjgSK60o\ncY1Z6SpVwNAsZI6sGXwZDxGk4EUjfLHRksWcn+tNKNat96YoAJU8FcZzXVQ0\nnSduiXmSsJmXGnl1OVwzOyFo+YJaDuvPRwq2IDHRu5Oo5x++fMRHwnoI9RLa\n0g6oRkvRH6CQk8xCHZzYQZbYALt9UfctvBmkFO8ZX3h0DJLT/Slic7aT/Ukf\nBJEZTi1djSWZdJuSiT7bpXzZI7oj+JKDdZiJtu/WUdhsqzbL6sgSTeksIBKG\nuC5xMwy05ggmFF3+szCBOrpo68PZi9lKAtKyrgzpHhlZsSH+fymfAC4dSGSu\n/TJEsgTdQcQtzfdeyvP3ApPjDmnK3+BBm53OEs1hGcoDP3iJM9Qh33DWVJo8\nhOKO\r\n=hC1s\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.6.2_1525338090227_0.53483731054491"}},"1.7.0-alpha.6d6b0c8b":{"name":"liferay-npm-bundler","version":"1.7.0-alpha.6d6b0c8b","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0-alpha.6d6b0c8b","liferay-npm-bundler-preset-standard":"1.7.0-alpha.6d6b0c8b","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nThis tool is of a kind known as bundler, like\n[browserify](http://browserify.org/) or [webpack](https://webpack.js.org/).\n\nSo, why writing another bundler? The main reason is that due to the modularity\nof Liferay Portal, several portlets that don't know each other in advance may\nneed to cooperate to share their Javascript dependencies, so we cannot just\ndeploy all Javascript in a single file like other bundlers do for web\napplications.\n\nOn the contrary, we need to bundle enough information so that the Portal can\n-when assembling a page- determine which packages must be used and how they are\ngoing to be shared among different portlets.\n\nAnd that's where `liferay-npm-bundler` comes in handy.\n\n## Installation\n\n```sh\nnpm install --save-dev liferay-npm-bundler\n```\n\n## Usage\n\nUsually `liferay-npm-bundler` is called in your `package.json` build script\nafter all transpilation and processing has taken place.\n\nTo do so, you must have something similar to this in your `package.json` file:\n\n```json\n\"scripts\": {\n    \"build\": \"... && liferay-npm-bundler\"\n}\n```\n\nWhere the `...` refers to any previous step you need to perform like, for\nexample, transpiling your sources with Babel.\n\nThe output of `liferay-npm-bundler` is a directory that is suitable for\ndeploying npm packages to Liferay Portal as explained in\n[this project's root README file](https://github.com/liferay/liferay-npm-build-tools/blob/master/README.md).\n\nThis tool is configured by means of a `.npmbundlerrc` file that must live inside\nthe project's root folder. Continue reading to know how to write such file.\n\n## How it works internally\n\nThis tool assumes a Liferay portlet project as input and outputs its files to a\n`build` directory so that the standard Gradle build for portlets can carry on\nand produce an OSGi bundle that can be deployed to Liferay Portal.\n\nTo do so, it runs the project source files through the following workflow:\n\n1. Copy project's `package.json` file to the output directory.\n2. Traverse project's dependency tree to determine which packages are needed to\n\trun it.\n3. For each dependency package:\n\t1. Copy package to output dir (in plain _package_@_version_ format, as\n\t\topposed to the standard `node_modules` tree format).\n\t2. Pre-process package with configured plugins.\n\t3. Run Babel through each `.js` file in the package with configured plugins.\n\t4. Post-process package with configured plugins.\n4. For the project:\n    1. Pre-process project's package with configured plugins.\n    2. Run Babel through each `.js` file in the project with configured plugins.\n    3. Post-process project's package with configured plugins.\n\nThe pre and post process steps are the same, they only differ in the moment when\nthey are run (before or after Babel is run, respectively). In these steps,\n`liferay-npm-bundler` calls all the configured plugins so that they can perform\ntransformations on the npm packages like, for instance, modifying its\n`package.json` file, or deleting or moving files.\n\nLet's see an example with the following `.npmbundlerrc` file (which is also the \ndefault used when no `.npmbundlerrc` file is present):\n\n```json\n{\n\t\"preset\": \"liferay-npm-bundler-preset-standard\"\n}\n```\n\nIf we run `liferay-npm-bundler` with this file, it will apply the\n[config file](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-preset-standard/config.json)\nfound in `liferay-npm-bundler-preset-standard`:\n\n```json\n{\n    \"/\": {\n\t\t\"plugins\": [\"resolve-linked-dependencies\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-imports-dependencies\"]\n\t},\n\t\"*\": {\n\t\t\"plugins\": [\"replace-browser-modules\"],\n\t\t\".babelrc\": {\n\t\t\t\"presets\": [\"liferay-standard\"]\n\t\t},\n\t\t\"post-plugins\": [\"namespace-packages\", \"inject-peer-dependencies\"]\n\t}\n}\n```\n\nThis states that for all npm packages (`*`) the pre-process phase (`plugins`)\nmust run the `replace-browser-modules` plugin (if we wanted to run that plugin\nduring the post phase, it should say `post-plugins` instead of `plugins`).\n\nLooking at the\n[documentation](https://github.com/liferay/liferay-npm-build-tools/blob/master/packages/liferay-npm-bundler-plugin-replace-browser-modules/README.md)\nof replace-browser-modules plugin we can see that this plugin replaces\nJavascript modules as defined under the `browser` section of `package.json`\nfiles. This means that, for each npm package that our project has as dependency,\n`liferay-npm-bundler` will make sure that each one having a `browser` section in\nits `package.json` files will have its server side files replaced by their\ncounterpart browser versions.\n\nThe next part of the `.npmbundlerrc` section specifies the `.babelrc` file to \nuse when running Babel through the packages'`.js` files. Please keep in mind \nthat, in this phase, Babel is used to transform package files (for example to \nconvert them to AMD format if necessary) not to transpile them (though, in \ntheory, you could transpile them too if you wanted by configuring the proper \nplugins).\n\nIn this example, we use the `liferay-standard` preset, that applies the\nfollowing plugins according to\n[its documentation](https://github.com/liferay/liferay-npm-build-tools/tree/master/packages/babel-preset-liferay-amd):\n\n1. [babel-plugin-normalize-requires](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-normalize-requires)\n2. [babel-plugin-transform-node-env-inline](https://www.npmjs.com/package/babel-plugin-transform-node-env-inline)\n3. [babel-plugin-wrap-modules-amd](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-wrap-modules-amd)\n4. [babel-plugin-name-amd-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-name-amd-modules)\n5. [babel-plugin-namespace-modules](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-modules)\n6. [babel-plugin-namespace-amd-define](https://github.com/izaera/liferay-npm-build-tools/tree/master/packages/babel-plugin-namespace-amd-define)\n\nChecking the documentation of these plugins we find out that Babel will:\n\n1. Remove trailing `.js` strings from `require()` calls in our packages.\n2. Replace occurrences of `process.env.NODE_ENV` by its literal value.\n3. Wrap modules with an AMD `define()` call.\n4. Give a canonical name to each AMD module based on its package and relative\n\tpath inside it.\n5. Namespace module names in `define()` and `require()` calls with the project's\n    package name.\n6. Prefix `define()` calls with `Liferay.Loader.`.\n\nThus, after running `liferay-npm-bundler` on our project we will have a folder\nwith all our npm dependencies extracted from the project's `node_modules` folder\nand modified to make them work on Liferay Portal under management of its\n[Liferay AMD Loader](https://github.com/liferay/liferay-amd-loader).\n\nA similar section for the project's root package (denoted by `/`) is also listed\nin the `.npmbundlerrc` which defines similar steps for the project's \n`package.json` and `.js` files.\n\n## Configuration\n\nAs said before, `liferay-npm-bundler` is configured placing a `.npmbundlerrc`\nfile in your project's folder. The full structure of that file is:\n\n```\n{\n    \"exclude\": {\n        \"*\" : [\n            <list of glob expressions excluding files>\n        ],\n        \"<package name>\" : [\n            <same as for \"*\">\n        ],\n        \"<package name>@<version>\" : [\n            <same as for \"*\">\n        ]\n    },\n    \"include-dependencies\": {\n        \"<package name>\", ...\n    },\n    \"output\": <relative path of output directory>,\n    \"process-serially\": <true|false>,\n    \"dump-report\": <true|false>,\n    \"verbose\": <true|false>,\n    \"config\": {\n        ...\n    },\n    \"/\": {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"*\" : {\n        \"plugins\": [\n            <list of plugins>\n\t\t],\n        \".babelrc\": {\n            <standard .babelrc file>\n\t\t},\n        \"post-plugins\": [\n            <list of plugins>\n\t\t]\n    },\n    \"packages\": {\n        \"<package name>\" : {\n            <same as for \"*\">\n        },\n        \"<package name>@<version>\" : {\n            <same as for \"*\">\n        }\n    }\n    ...\n}\n```\n\nWhere:\n\n* **\"exclude\"**: defines files to be excluded from bundling from all or specific\n\tpackages.\n* **\"include-dependencies\"**: defines packages to be included in bundling even\n\tif they are not listed under the `dependencies` section of `package.json`.\n\tObviously, the packages must be available in the `node_modules` folder so,\n\teither they are installed manually without saving them to `package.json` or\n\tthey are listed in the `devDependencies` section.\n* **\"output\"**: by default the bundled packages are written to\n\t`build/resources/main/META-INF/resources`, which is the standard Gradle output\n\tdirectory for resources, but it can be overriden for customized builds.\n* **\"process-serially\"**: defines whether to process dependency packages in\n\tparallel, leveraging Node.js asynchronous model, or one by one. The default\n\tvalue is false, so that everything gets processed in parallel, but you can\n\tdisable it in case you get EMFILE errors due to opening too many files at the\n\tsame time.\n* **\"dump-report\"**: write a report HTML file in the project directory with\n\tdetails about how each package is transformed and what has been done.\n* **\"verbose\"**: dump detailed information about what the tool is doing to the\n\tconsole.\n* **\"config\"**: global configuration which is passed to all bundler and Babel\n\tplugins.\n* **(list of plugins)**: is a comma separated list of strings defining the\n\t`liferay-npm-bundler` plugins to call (note that the\n\t`liferay-npm-bundler-plugin-` part from the npm package name may be omitted).\n* **(standard .babelrc file)**: is a `.babelrc` file as defined in\n\t[Babel's documentation](https://babeljs.io/docs/usage/babelrc/) that gets\n\tpassed to Babel when called by `liferay-npm-bundler`.\n* **(package name)**: is a npm package name and the configuration under its\n\tscope will be only applied to packages with that name and _any_ version.\n* **(version)**: is a npm package version and the configuration under its\n\t`<package name>@<version>` scope will be only applied to packages with that\n\tspecific name and version.\n\n> Note that, prior to version 1.4.0, the `packages` section did not exist and\n> package configurations where placed next to the tools options (like `*`,\n> `output`, `exclude`, and so on). This created the possibility of a collision\n> and thus, the package configurations were namespaced. However, the tool still\n> falls back to the root section (outside `packages`) for packages configuration\n> to maintain backwards compatibility.\n","readmeFilename":"README.md","_id":"liferay-npm-bundler@1.7.0-alpha.6d6b0c8b","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-jw/B7ogvWsd4nvYD5YkjjBpWSQjetGu0phT/p2LfV/QD3Actnd+6HyW1Lssns2qtgEsdYhTF19gmR6Y1LGmRKQ==","shasum":"c4b263be38ac31f1b647db42757f4e5cac0bebe4","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0-alpha.6d6b0c8b.tgz","fileCount":106,"unpackedSize":331105,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa8DyICRA9TVsSAnZWagAAr1oP/0tUNK71mTzxn7oBYAzj\nNaoTtADe+WmT49n7lNZ/E4S+22yoO45yLvE2zKwR3nva8XM9iiSVKBa234h7\nEs7TDzCl1BOsh+OOm8OkhzWBzVdJlxOlUO99lTw0HgDpzqasP81d/zdZEL13\njvQ8C0/YO4iCXH1GOvvvdG7V09/ggc/H2Qcf1IFi/sFCftYbpOSMH6Oc4qv0\nDtx1bnWcl2Awc0CBmpl0bzr+xwO3x2tjbCRNMMi89XXUYLpYr0ABajbuBb6O\n+o9+xVsZM/oyNJEW4rP7Y33Fc4NPggj3EsWNBpNcNyp25tMpsTzWEBK8ogzx\njXleuv02PfYSNvLsGLp/ZzrWixhTMPy1VB8dRH/G/eVTcCUS5yOp1j1UKD7L\nJmzQ/ZxkbFrOUBVhmRUSWllkJQcG/d0SKuSWlZv57LSOxql9LBiFZrO/zB8C\n6tAQRUd11YdF+D//kXOenEhGU0/4J1k3LhSbafgFdde2teCxSEhNOotnESao\nZvSLSaW+irvCCbXIDi0/6+3kXOQEFAvVXJn1upop0RH2fSD8ja8APPMx/GBm\nWImKKA70bkn5xs04QG64qsvaszYDnmPY5zyK712bA/Db8jSxVvH4jXj5jzrE\nszyfaolALKyOeuHs4kw5qIkJS7OhztmonRWMr/775tYYGyAKOmP09NorlF6W\nDvUG\r\n=7OHI\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0-alpha.6d6b0c8b_1525693575089_0.659762225965983"}},"2.0.0-rc.1":{"name":"liferay-npm-bundler","version":"2.0.0-rc.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.0.0-rc.1","liferay-npm-bundler-preset-standard":"2.0.0-rc.1","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.0.0-rc.1","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-ySrTMyuQZzpTxcad3t7ABqdxwrHZI1SShbl+9yjITKiG+M8K08KpQNvmQSE3gKqnyY26SiDRvSaYML1hTOCVNw==","shasum":"1ab10b2e0025cd1d7dc5742cdfea6577fff522fc","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.0.0-rc.1.tgz","fileCount":106,"unpackedSize":331075,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa8XoKCRA9TVsSAnZWagAAq0YP/2+dgvcA5czEIex34axF\n2ofWwb2fnMDej4E8M9NpoCYlmrXXFwHRJ8fiPwUD3Awm+0zKGisISedd40SJ\nINOgOCtsOixFFDz1DxIQ4VX+6VZze/+IlhApybw4b84i7zIYr4gyXNVohthO\nPgLa3M8ZLoG0xL6yn8Y76/P9hhkdWTyhLHKm9tKQ0BjQNcgtdP+fQIleFgp0\na2U09OAb2EPIJauZTbcE1kj0KkFdzisihuH0A7OBllc1I12ByHsQ+MTxUGQs\ngtvKEjLLuAKkdKlQJSj9c3/TIo4uFEKJXRtTp428Zy0LQAIIUM40WbiYkELW\nMMO6Ud7WcPoeqKJPQITgVKEZdaH10uPDl0CP3YuuUDZW2D6oMWPGjjRWKSFO\nl24rJyLn4vZPXmFFNMG3/5lxyX1duFqgtcv+hWDam6iSEN9Bd7v0grR+u4IK\nhAkszF9N4E+zY8Z/GNiJO3ndGZt1M4qgSEhlyzSgoNdMAA2CEOpZ5s8fcZx7\nqkHfrHt2Y0eyclGp9saONR5GmSotJe23mar/nwKJ0lZMN0ZryOrcVWZtqSqG\nDS1F3pSsb5lw+b5VCeSVyYolZ+L+Vn1uZvtXhJ3VQN8+fgN6WxXNsYnD3TMl\ntwGvZ7cBhAmybkYLDlvWB2gL5PhZHvMGDVYqlQOmM7I05xH3FCoPAeMN7mHf\n7zwe\r\n=qupy\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.0.0-rc.1_1525774857394_0.5920816530809265"}},"2.0.0-rc.2":{"name":"liferay-npm-bundler","version":"2.0.0-rc.2","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.0.0-rc.2","liferay-npm-bundler-preset-standard":"2.0.0-rc.2","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.0.0-rc.2","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-CZ3QKKePjoice5LSjC+QPUL1mwTR/ikONeIPY7XUSAS3iuZChC9SDI4IGOFJl1wJUAFni2OYGqXgUxN6KYU+3w==","shasum":"c61baa71e6d64248d8c4ecb5fafa7ef46bac1e49","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.0.0-rc.2.tgz","fileCount":106,"unpackedSize":331037,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa9FphCRA9TVsSAnZWagAA+zYQAI0ok71q2t6MTvrlA8T3\noKO+O5CuV2ZXrF6ciTtf6DyVEqbb9tOQE5BShc1fx7pFyu6CLukW2yW4jmib\nKZET50ciodX+zbkJQHhSwgAW3XxnilX+tzuqqaN1CCkojizGseg26J50IWaW\nLMGuFkCR34/eh87lACvmM4FVI9ssYCc8Obt+VWIAllLhVQUO/+E390Cd92uL\nD/ik7PknVqzz9b6X5Vxtp+45dFujHbZnvKblS9mLBLW9g1UlJfDTt0KoYraR\nDQF1qhHhMdFFGf4IJ7RbpfpVbNxJpn6YMnTtbEwmmfi9ndk7XXtplA2Otat7\nCBp7g2arl6x0sieETNsbZtmFAV/QzKXfxt7idxlkTGk27nRwRwUBpeH2/rGh\nJ4mW5a2HUZFHl4G+AaTrKZp9wGzpWOpDf9SII2roxrmr0LFJy+guXGNkjEDt\nErhngk8E58UvYwoj3XMs1NEWdpC8Y8xIR+vHjpPeUii1ZvETp0ZJNoycoXv+\nDmSSnJgxg8wOicLzZ/NSKypznqMpz9ZCXqAAqdkfXQoLdgXDmFwNoUFB2kn1\n6LUMnQYaPKIT2eoeyAYlEV1Kjgw4GP1WaB91+9YeR3PBpO//mEqaJcJgJ6uO\nKnPNXkYSe31kRcP5gkbE1607Ihu4YU8BQSUNe5WKvPSYRc9iiY6qXtOl2i4x\nqpE/\r\n=+lYj\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.0.0-rc.2_1525963359828_0.21110132301303586"}},"2.0.0-rc.3":{"name":"liferay-npm-bundler","version":"2.0.0-rc.3","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.0.0-rc.3","liferay-npm-bundler-preset-standard":"2.0.0-rc.3","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.0.0-rc.3","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-kLlEy1cRfruaZw+NrDcAZO5Yz/yuzO9yVG8l4gxqd40x/Brj3OOkNUZS2kxNcFpgSYO3p4X7D/l3xHhIlEzPtg==","shasum":"9feefbb000ac7a5f2f984491c933dc9432d23a4f","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.0.0-rc.3.tgz","fileCount":106,"unpackedSize":334012,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDmd5CRA9TVsSAnZWagAA8QYP/00JpMBIDIqNP3IsDV3E\nsquNHtmy4UVKHGmZ/9wSGpNXBKuArS85Jc2ZdEcqODDYrR1OWsSki7Ulp2Ww\nZ/U3wKPd8OAVD2f/gMupN+RfMkqqJkcGn665bK5lHrKxvRKyqziCC1gEGhmT\nrC0lAwMUvGx4oMIfv9IlIPxqcwfd4Y9B5+FZZPKufE57iMRHkKTH/21dGBhR\ngrStpJsKHCK8EpeR32+Wn9VuFNLm81fHgVkQdZIuU+0ExCUXIg4sbD1s8ess\nxuN6mkxyahyAdxP8LzM6zQ/k7HrSbw9U0UrzZkNQawA/kQ556VRZSmFefhZ3\nZL0QRabw1GmMoj86GznLajdF6zrStbVoTxXDmWgUvJgcky+8nOEmRdC812UM\ntVLWxF4LkBvrxDcsp4xnl28XfkWv9ZcGVccxbS7Ab6bzUA4vXEi4K1qveBbc\ngUKby0zq/i69ok0YxPAn5MQ1nG2QUCuTRMNKk88CK596D8dqjMPFziuATkh0\n5L8arcnheXYuXlEXbBrIJwnI8hDM1hzfXixVcz9GxbCy/wwIBi25vPewJaT6\nmfvvg9r3T7NrFO42BkhwKAplcchg1vzn+1QMfHBcaDSEeMDwJU3L2/vOc5Uv\nrLHotV6PELsLjS/fHqCGxK/GuLfdBNxxlJvx2qUzmsgstiHi6gPj3yiz9fAQ\nhoe9\r\n=odaY\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.0.0-rc.3_1527670648457_0.6267072130080562"}},"2.0.0-rc.4":{"name":"liferay-npm-bundler","version":"2.0.0-rc.4","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.0.0-rc.4","liferay-npm-bundler-preset-standard":"2.0.0-rc.4","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.0.0-rc.4","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-rxWX08ySmo38AROP8xUGV6QdpZut/sDHGLryzz7P6eV4nuJB+aPZmt/NVEODK2vAAzYa0ir91mLQzmLVDs+WPw==","shasum":"6cc44ec5603ea6d6831596d761060325e2bb1a5c","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.0.0-rc.4.tgz","fileCount":106,"unpackedSize":337584,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbD8S6CRA9TVsSAnZWagAAP5gP/0P5B6V17U2IWqNal08H\nL8dbohK7X4VOpHOYI0gY261AAkZOOBG/UYle37ee2aPSLPofuZ06L5+qk8bH\nNpFHObXPPyPUMpLIo3le4dhPhD3a07+/C8t2tFolhvdhVOM3sZEHS9tMiIHO\n6Cioxr5zq6LJ/UBeRaUCY4l0RhzncWTTLWL1Lo0kLMS7T1yysYAYkQav2pnB\nDz3yOTb+bjnekPScs7Au8+1e4Ps0KB6xXBm3lcPOU6eyMkqYBgedZThki7uO\nCNz5T3TJtcKXTXvQLEf/JyeBDUkr8MKV0gBLYO/99mvHuFUAymfCyjulTzdJ\neqF26Y0ZzcqMbJNci1KJR5cWECxvB1tHHolqq9kNhCSqspMA05LAIHUOd5A3\nDJIAKytoBaKoZFYFfNwNEv4e4U06m/RvwPvLOGDOaeBVZSLIQjfuizCLS+5o\nWc797Pk0RPztBrYapA2K3WQX29Mj3iNZucyHIDuriiDVeH22QPl/2sP0r0mY\niYb81bxMIjYENf0JN/HYf976fIWmrjVIeBkVjdWBFWFtsvcPYkO0wjz8OZ8d\nTAMvqhoowl8QKqkqgjbejW7sk86HdZNtj/xhqW+Zv5kYykFI8XtHE01YT19t\nd5Jw7l0Dr4js9g7VqYhg7DpRxXB3+tk98wYv/z6tFKEfkuiOx8lqwZSsOWGe\nLt5q\r\n=Pd/Y\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.0.0-rc.4_1527760057263_0.3941842307140655"}},"2.0.0":{"name":"liferay-npm-bundler","version":"2.0.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.0.0","liferay-npm-bundler-preset-standard":"2.0.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.0.0","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-QBkR69rfr1iLW6LNR4zYRlIIzVdBqF1fUv7bm50cbT3FuPKxDf8hYkQ0h1MfjRaNVzvjtel9Hrgoc7eWBhZ5iw==","shasum":"dd88aa2cee3dfee63ecb1fb8b223c416fa419e07","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.0.0.tgz","fileCount":117,"unpackedSize":338642,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGlFlCRA9TVsSAnZWagAAj9UP/20BbYtT7d4P6CWR9mEM\niWflr99HHhgNsPU0kWbVFVFzOKke60cPzk6fzKqcRK3b/4s4F1+q12nuyx77\nKFpRKcjGJMMj4zh4CrOO2VN7oiYCwohr/+MSIBWf9PZjQeARn1nupBr0xwg4\nRV5lX4KO+HzlMphAyWu5BGmWahftJhyyarPxABGpzqEB7R9f/YLMQ2olJFZo\n6r0uV1C3Wu/9z57Yyn9fUsbKF46ZtBFSLHIl9oDZjFenP/FokAIrD/G7dMp/\nVZlp3RV5puBnRAD2NCpfSKeGdMA6sosKvkYUJcKH1sU5KPUOv6xeRG3rrTCI\nlLj4E4dHfixZS9ei0c2dBCCg6VkGMLHuyX4zvlF32/JPQtjbbz76awxYtSPS\n3vOy1xCPc1oAM+5dkG2EsPXg1cjLJuIiNgi67lUyGQY5uOZ2ig3sOdcKFfAT\nUwt+M9eidoG2Gzm0WQkeEmVyAWzXcHgEHsjfnK0BQt0h+nNM+PhicrjPaC4L\niuy74arSDSMvc7X8byM8iejqxm7Et9vZ6i7u6E6qu4Wplqxzq5BH2lTvQmWx\nR1Dsy2rsF+CLXD8ub0ydRINoxUeTAcyKEMKeMuJGojq1Wb8Cansqih/NGgeX\nATILGN5gPkLxSVG8y1+VnTxrjblcrZUs59+LinYBroOyAPbUhl/3JdXf2pmj\nAp7e\r\n=fgCa\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.0.0_1528451429269_0.36019905044130995"}},"2.0.1":{"name":"liferay-npm-bundler","version":"2.0.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.0.1","liferay-npm-bundler-preset-standard":"2.0.1","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.0.1","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-naydkm4kW2YH5phXGqPmczsBMo2Xth+fllSQ5gV5KRL8hzsnx8E2NNSdkXJkRfw2GtZoHJj3siiZf88bmJzpFg==","shasum":"7a6a180c77a45a9988f37d3b9b6fbe96d3f3330a","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.0.1.tgz","fileCount":117,"unpackedSize":338642,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbHk8CCRA9TVsSAnZWagAAssQP/A+yWxv2d1A+ef62jEAz\nKG2ZTle52dkJc1ajgbC7eeNur4aG0dNQf03EQhPkpwf2era1q8G6eLx15nfb\nm5/6473VGTkunrCcqoZWXYCz3rGfE2fiAUkc0lir7AvGuBbHNOuzaQQmnKqx\n16Hj8lAvd5ES9195W0mprXUIgi2wgbZLtsRWKn85dCySNF+vgaoDN/zuVG/x\nfPUrzY0FWgqYU8E02gh39v4sFFg3b1UMpOmuxR+Z6AZyuOIaGuD0jAjh4NOf\nvHGyy01jqIl+BbL4SSWTKZJlhop49ILMlSTwEa0ZHGakuLuDaOJ8PDVeb6yH\nj4Q0eI7BZqBf0JZXKSWGaXQ324dvNggsvM3E0V5HgXOGOEbCkiJrj08WpN23\nccnkmoi/JoUrvo5YlUIJaeAZpTXs49dkLO3T+9Nf7nKoc2lMY37So25H5rZn\nZRVwGG3mS4Q/5zEENl1Td1ZT5v0MGtwXhF1lKJe/8MZynnwK9UUV9hnIRCSY\nf+cf59xMCGq4gehQuzJqQSznS+3K5EjvU5a6Ailvzl9K08gjWCYR/td32sJb\nXgKlSItKDr9oQLWBniFudezEMu+83mP+cF7cM6BSRLblxxRFKdwv0VUiFiTi\naZ5Ul+/Cn3C3mZJk8db5nlm7vUI6399QvXYJTqsHEP7Gj7mCsTmKdj5QK5ZO\ndC18\r\n=7G4C\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.0.1_1528712962301_0.4550629273869462"}},"1.7.0":{"name":"liferay-npm-bundler","version":"1.7.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.7.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@1.7.0","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-mpPhLe4bdym31gGWhRC+CcRwv3NWpVuf5hodHoIEq5yZmdEea4Ut6dy50Mml8GsdvfW8w3sx9Xc4yxik+8QUkw==","shasum":"3da0f112f83c35063b80232544946f413af01f2d","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.7.0.tgz","fileCount":107,"unpackedSize":316010,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbJ4AGCRA9TVsSAnZWagAAnOsP/RQKvw4JU6tlGneW48id\nXh79ci7tLOtdtKbGHF4Nl3ViOZGLNO1UiPSFFjl4tJO0Nc/F7kkfill4MC3j\nodpwUOfyCnm+1K85ec5yNdTrrMr8keCjyDpYcZfaGgz9deHXZFZIms9Gs92J\n07tZFz3KxIgx9ewoUKf97hWsGMbne5JhWFg0R4m9R3CcyQVy1acEy/z6SDFu\ncJaqze+tYHoq/+tVshabkD1lvVFZu11/1Ibp4v0kL/bw7ANfqC8HoxxS/Eip\nVKi5LokcHd4hQ+Itnmce3khgCtkqxXik2mLREpFUP+ITTtBeVmC2ewOIdgYu\n21NVOb6EYGVHgf+l1MrSyLYCFGgDSkgl5jw/Zho8KAWgj6W86lp7BiwRAnMN\nJ8tJK2q1eIJNmimynwHXxztpkcfwlyJ4P2k6u/cU7zvtAoF5Fnwh/EOdVcwc\nUmV/k3R21uK5mzLCslPhk54kq9bmRSXvgudH2kJUNGgLL1APBaGtwMMvrEiJ\nvvBcf5LyyUYQu/S1Lg+ysJaXm06Qvsyb9ZjniSlTOFKuLsya/O73wiyLYTDH\nSTHh0KDabh7a5Uy3yxrp/PNdITrt29Syu9e16D+ZK344FUXhboPaFXcf8+Ud\nvFYCppHiMGMLfTpoFllrfuJnFlzQ5nOtHMFg+Ckk2QH3s8i9xuCnZYj1CWRy\n/Vzc\r\n=2ytG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.7.0_1529315333596_0.975170182594223"}},"2.1.0":{"name":"liferay-npm-bundler","version":"2.1.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.1.0","liferay-npm-bundler-preset-standard":"2.1.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.1.0","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-J7dxnvxwcatM5lXj+lb5Tsa2/7Cdx5KL8/7cKM+iS3jwfGzo4anO68P/rQ8WZBcO8fbGLJN6etllxKMySmC3dw==","shasum":"f7bf140aecc3c81bb85189a79a985cefb6b6ac5b","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.1.0.tgz","fileCount":117,"unpackedSize":339235,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbKmjaCRA9TVsSAnZWagAAkKsP/3Drf1UGMNZiA2E8jUUn\nvPoIz5C755Y0WsDpmz5sQq7+3iCHm7yb9LmHnX37j0NKI1WineHw2XTv4VIv\nTQtJ0vMIM+o6qhivuwyjXXMlN6h49bACfwNBFN6avEN+QYPMeUf9BnXgNlpx\nfW5VNOWVbox/l7y1KtMeZe90nwTPW8gXxzp3CJeU83qJREbb/U3tFOplxK5E\nsyN/gNo1y9KZ7aQ2ayhIMlfPGK280s2dUpz+LjTBgTxZY/P4P6pEEmUUxDN/\nkQh1QzDiIkpsybkMAHcdPQJsS9wZckAUQLLjjA3JQOKOU8DBaSB4kR9hAgn0\nB3LYjkMtyEKTa6XGJKOY4rmr75TietlycbNMNtrY+3wwoOinScCv4nnW5vST\nyoqHOt2cSe1ejIuzGDGB0lILHHjBl8678wyum28vSQKWhWAfEPbpumgRqjpb\nlgL6jJz21+mvNqW+GGprOF7IUayKElyJ0ETzLquWFW9TosunzoCT+MrZhSLI\nJnO1odOEcMlM45DEfSTTqKfXPjTVuMejhGHz6mOrb16l5DaLXBpv2pRlwo8N\nfpfsNwon/WtlsYvmCxehknr7fVQJWNJSGsbnMPHA3eQ43QOyQZsfwvKxd2i4\njbfmFApV3b2lBJHziIA9BYVvSux/NgDx5zO+DhP/8y6jTGjYMZpxzifhaJuJ\noaU8\r\n=p5EV\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.1.0_1529506010154_0.9282944141352247"}},"1.8.0":{"name":"liferay-npm-bundler","version":"1.8.0","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"1.8.0","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@1.8.0","_npmVersion":"5.6.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-lluuYLMeVWWls1AcSStWUwbaPjF9gG2gQEKS2wxLYzV0KSaUQM3Jy4QhDEweTmcCtlFXEAVooWOuDcNM9XNQmA==","shasum":"1ab0c184ae98feef896877966d32a5d96f58621b","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-1.8.0.tgz","fileCount":107,"unpackedSize":316603,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbKmnzCRA9TVsSAnZWagAAZvIP/0CxWnpbpAB2re3UMRA8\nyUUi5v5Dc+Lc6syR7eICfKXDbZpRBBEJ2PTCbgacZoGlVK1in4vUA9AZNlaq\nlwb6IEWE8/V6ebCoBhCuQcaI1e0jfsbDHU9J/MapqyUj9J0/it6ddLS4YdlN\n95Hgiuwbz0KV35rOrF2kNVvJuqz+wELKdlR3cjF2oJFUs6l+ZyDcYs33kQ8O\nzQrad+zomtmtBOXme8BRkzNd8ctBAe18EObSuvUw2MkllFiyzEmIp6WaF+TO\nG3NBAGeXA2Gt6JfgPiEyo1yiQ/nrr35hL140IRIujupZB0lxKeD/tRq4/28I\nbL6nHo+W6Qhl6XNCgvOkUT7VbDLu9np7Ee5QiNS+eJsyuyz/jjnibWbICSPL\nk3cSKVuNI60fRxVe5zejP584P8g6wPLwXt0d0bPUF37meUD7sZskdtQaHcTK\nfr0N3OsrUqas/rP4ZOk6SHnhH4l2EtI7c8s778k1ekRkNbpsEKHLPQSFAabS\n5+jOCcUcPetG68+mOPOWrqosqYgVVG3zLgr3HCKQuetsNRrLjakKa98hLhsd\n16q+3X39QWcVfkvmaD40ryWXZeUipk8WUhcLoVTk+gEj64TVd2H/cNk3zepS\nk5SRn2mucRny5JjpPAZ6bAwlt0wa8UYBw7tC1c/j6iEfteMFBaCBTbCluxYb\njem1\r\n=J/DR\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_1.8.0_1529506281576_0.6258884054003611"}},"2.1.1":{"name":"liferay-npm-bundler","version":"2.1.1","description":"A CLI utility to bundle NPM dependencies of a Liferay OSGi bundle.","main":"lib/index.js","bin":{"liferay-npm-bundler":"bin/liferay-npm-bundler.js"},"scripts":{"build":"babel --source-maps -D -d lib src","prepublish":"npm run build"},"devDependencies":{"babel-cli":"^6.24.1","babel-preset-es2015":"^6.24.1"},"dependencies":{"babel-core":"^6.25.0","data-urls":"^1.0.0","fs-extra":"^4.0.2","globby":"^6.1.0","insight":"0.10.0","liferay-npm-build-tools-common":"2.1.1","liferay-npm-bundler-preset-standard":"2.1.1","pretty-time":"^0.2.0","read-json-sync":"^1.1.1","resolve":"^1.3.3","semver":"^5.5.0"},"_id":"liferay-npm-bundler@2.1.1","_npmVersion":"6.1.0","_nodeVersion":"9.8.0","_npmUser":{"name":"izaera","email":"izaera@gmail.com"},"dist":{"integrity":"sha512-EEhS7OrgiDspYeg/+ZkIjRzUJS6KjQ2+/SXodXafMy9bNNpUPVahheXkSmgd6xmQvk8AL6t1yr3UREyyU58eNA==","shasum":"8a3a3273ec54d387c0a51aaf880c6251e0585d0c","tarball":"https://registry.npmjs.org/liferay-npm-bundler/-/liferay-npm-bundler-2.1.1.tgz","fileCount":117,"unpackedSize":340712,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbOfn9CRA9TVsSAnZWagAAaBAP/3/ilMvUbfqRtQMXqIed\n7eRJJHpc5aHQk3UTjcW0LzrMzOTin9fukpwrXYss1+n/r1rfeo6lCtuaxkYJ\ntobtQoPlXU9+/le97T/N+7cmU4e80RAJJbqlkrLIcy1PawfdPIeG4pgDLxTe\nIyIQY0kNfdIzipY/e/Z1U88vk94xSiYF7CuU9bPtAniu6cax3ANPwMiNwUUN\nVbBrO2FHOXYder0v/e7PbGfPyeL4e8gIurZreLX/aJcu52cLYyXk4ztwqo5+\nsD4mkff7hXj/bv0E42iz/RRABdS4npy50lDwwkpVlwcyZa41joHghFDkz39M\nSjDOczw2ql3/xUsCjB87u65hJ+NhgL7Ffpy01aTUD4gJo2lQfEVzz4sxyZTX\nOTkvxbbCiFGhM8ZUoHYR0/bHehN2S8ygHMEXBvfDFjAzqEQ8nOeQHPLsQQQJ\n5ma69Us8pGqXYL9ZlKhE3uQ8GZBL8Es+dnWw5xWx3q1Y8/zraTUGFz7tqVD0\nVSORKyaoPukcnwz0q1HP1Ul1YkvhOT7UEwACYXVgcBO/winz38bCILanL1gF\nBJtnfe8cH5jY7vzN6doiDcPKPWag9V/96qPs3x1jeIlf7dvB1nouSHtujw57\nL4E3BLbjjg0S8xZEs0OZysJiZVbMw3NcdA+fix47EIlh0Yg6umiBzAa9ROC1\neSb6\r\n=JPay\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/liferay-npm-bundler_2.1.1_1530526205878_0.15309134980046601"}}},"readme":"# liferay-npm-bundler\n\nA tool to process a Liferay portlet project to produce an OSGi bundle containing\nthe needed npm dependencies so that it can be run when deployed to the Portal.\n\nPlease refer to the\n[wiki](https://github.com/liferay/liferay-npm-build-tools/wiki/How-to-use-liferay-npm-bundler)\nfor documentation on how to use this tool.\n","maintainers":[{"name":"izaera","email":"izaera@gmail.com"}],"time":{"modified":"2018-07-02T10:10:08.303Z","created":"2017-07-04T08:28:20.698Z","0.1.0":"2017-07-04T08:28:20.698Z","0.2.0":"2017-07-04T08:39:43.134Z","0.2.1":"2017-07-04T08:44:04.719Z","0.2.2":"2017-07-04T08:44:29.824Z","0.2.3":"2017-07-04T08:55:37.142Z","0.3.0":"2017-07-04T09:02:18.712Z","0.4.0":"2017-07-04T11:12:07.187Z","0.4.1":"2017-07-04T13:45:57.387Z","0.5.0":"2017-07-06T08:20:08.148Z","0.6.0":"2017-08-24T09:25:08.770Z","0.7.0":"2017-08-25T10:18:23.428Z","1.0.0":"2017-08-25T10:54:12.581Z","1.1.0":"2017-08-31T08:11:50.536Z","1.2.0":"2017-09-14T09:19:09.713Z","1.2.1":"2017-09-20T07:39:31.771Z","1.2.2":"2017-09-21T11:16:29.829Z","1.2.3":"2017-11-23T10:16:05.486Z","1.3.0":"2017-12-19T12:44:04.162Z","1.4.0":"2018-01-16T09:07:14.113Z","1.4.2":"2018-01-30T15:45:16.793Z","1.5.0":"2018-03-14T14:35:35.863Z","1.6.0-alpha.fa6ec338":"2018-03-15T10:03:49.203Z","1.6.0":"2018-03-15T10:22:17.500Z","1.7.0-alpha.b6bde8b0":"2018-03-16T08:56:10.454Z","1.7.0-alpha.1158492a":"2018-03-16T09:33:13.963Z","1.6.1":"2018-03-16T11:24:48.470Z","1.7.0-alpha.0e246ccd":"2018-04-13T12:15:47.620Z","1.7.0-alpha.43ab330a":"2018-04-16T07:31:42.952Z","1.7.0-alpha.1b73ffed":"2018-04-16T11:57:55.425Z","1.7.0-alpha.2956f206":"2018-04-19T14:32:59.479Z","1.7.0-alpha.37376d14":"2018-04-23T10:14:42.836Z","1.7.0-alpha.e4d06b30":"2018-04-24T13:50:52.358Z","1.7.0-alpha.cec3fa45":"2018-04-26T08:31:36.987Z","1.6.2":"2018-05-03T09:01:30.377Z","1.7.0-alpha.6d6b0c8b":"2018-05-07T11:46:15.150Z","2.0.0-rc.1":"2018-05-08T10:20:57.470Z","2.0.0-rc.2":"2018-05-10T14:42:40.375Z","2.0.0-rc.3":"2018-05-30T08:57:28.733Z","2.0.0-rc.4":"2018-05-31T09:47:37.434Z","2.0.0":"2018-06-08T09:50:29.454Z","2.0.1":"2018-06-11T10:29:22.399Z","1.7.0":"2018-06-18T09:48:53.849Z","2.1.0":"2018-06-20T14:46:50.221Z","1.8.0":"2018-06-20T14:51:30.343Z","2.1.1":"2018-07-02T10:10:05.966Z"},"readmeFilename":"README.md","_attachments":{},"_etag":"W/\"f659a9c1e2b0c55b52fbf928a2889a6d\"","_lastModified":"Mon, 02 Jul 2018 10:12:59 GMT","_cached":true}